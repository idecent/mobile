3.1.16 (Brainy Betty)
b275670dbda9a1e1d3d991a86dcf7e19f28e0ea0
o:Sass::Tree::RootNode
:@has_childrenT:
@linei:@template"ÑH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari, Chrome, and Firefox all support 3D transforms. However,
// only in the most recent builds. You should also provide fallback 2d support for
// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Firefox.

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@options{ :@children[io:Sass::Tree::ImportNode
:@imported_filename"shared;i;0;	@;
[ o:Sass::Tree::CommentNode:
@loud0:@value["p/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari, Chrome, and Firefox all support 3D transforms. However,
 * only in the most recent builds. You should also provide fallback 2d support for
 * Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Firefox. */:@silenti ;i;	@;
[ o;;0;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i ;i;	@;
[ o;;0;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i ;i;	@;
[ o;;0;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;i ;	@;
[ o;;0;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i ;i4;	@;
[ o;;0;["./* The default x-origin for transforms */;i ;i7;	@;
[ o:Sass::Tree::VariableNode:@guarded"!default:
@name"default-origin-x:
@expro:Sass::Script::Number:@denominator_units[ ;i7:@numerator_units["%;i8;	@:@original"50%;i8;	@;
[ o;;0;["./* The default y-origin for transforms */;i ;i9;	@;
[ o;;"!default;"default-origin-y;o;;[ ;i7;["%;i:;	@;"50%;i:;	@;
[ o;;0;["./* The default z-origin for transforms */;i ;i;;	@;
[ o;;"!default;"default-origin-z;o;;[ ;i7;["%;i<;	@;"50%;i<;	@;
[ o;;0;["//* The default x-multiplier for scaling */;i ;i?;	@;
[ o;;"!default;"default-scale-x;o;;[ ;f	1.25;[ ;i@;	@;"	1.25;i@;	@;
[ o;;0;["//* The default y-multiplier for scaling */;i ;iA;	@;
[ o;;"!default;"default-scale-y;o:Sass::Script::Variable	;"default-scale-x;iB:@underscored_name"default_scale_x;	@;iB;	@;
[ o;;0;["//* The default z-multiplier for scaling */;i ;iC;	@;
[ o;;"!default;"default-scale-z;o;	;"default-scale-x;iD;"default_scale_x;	@;iD;	@;
[ o;;0;["*/* The default angle for rotations */;i ;iG;	@;
[ o;;"!default;"default-rotate;o;;[ ;i2;["deg;iH;	@;"
45deg;iH;	@;
[ o;;0;["</* The default x-vector for the axis of 3d rotations */;i ;iK;	@;
[ o;;"!default;"default-vector-x;o;;@O;i;[ ;iL;	@;"1;iL;	@;
[ o;;0;["</* The default y-vector for the axis of 3d rotations */;i ;iM;	@;
[ o;;"!default;"default-vector-y;o;;@O;i;[ ;iN;	@;"1;iN;	@;
[ o;;0;["</* The default z-vector for the axis of 3d rotations */;i ;iO;	@;
[ o;;"!default;"default-vector-z;o;;@O;i;[ ;iP;	@;"1;iP;	@;
[ o;;0;["0/* The default x-length for translations */;i ;iS;	@;
[ o;;"!default;"default-translate-x;o;;[ ;i;["em;iT;	@;"1em;iT;	@;
[ o;;0;["0/* The default y-length for translations */;i ;iU;	@;
[ o;;"!default;"default-translate-y;o;	;"default-translate-x;iV;"default_translate_x;	@;iV;	@;
[ o;;0;["0/* The default z-length for translations */;i ;iW;	@;
[ o;;"!default;"default-translate-z;o;	;"default-translate-x;iX;"default_translate_x;	@;iX;	@;
[ o;;0;["*/* The default x-angle for skewing */;i ;i[;	@;
[ o;;"!default;"default-skew-x;o;;[ ;i
;["deg;i\;	@;"	5deg;i\;	@;
[ o;;0;["*/* The default y-angle for skewing */;i ;i];	@;
[ o;;"!default;"default-skew-y;o;;[ ;i
;["deg;i^;	@;"	5deg;i^;	@;
[ o;;0;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;i ;ia;	@;
[ o:Sass::Tree::MixinDefNode;"apply-origin;T;il;	@;
[o;;0;"only3d;o:Sass::Script::Operation
:@operator:or:@operand2o;
;:gt;o;;@O;i;[ ;im;	@;"2:@operand1o:Sass::Script::Funcall
;"-compass-list-size;im;	@:@keywords{ :
@args[o;"
;"-compass-list;im;	@;#{ ;$[o;	;"origin;im;"origin;	@;im;	@;!o;	;"only3d;im;"only3d;	@;im;	@;im;	@;
[ u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:
@linein:@underscored_name"only3d:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@name"experimental:
@lineiu:@options{ :@children[ :@keywords{ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;is;@	o:Sass::Script::Variable	;"origin;is:@underscored_name"origin;@	o;	;;;"	-moz;it;@	o;	;;;"-webkit;it;@	o;	;;;"-o;it;@	o;	;;;"-ms;it;@	o:!Sass::Script::UnaryOperation	:@operator:not:@operando;	;;;"-khtml;it;@	;it;@	o;	;;;"official;it;@	[o:Sass::Tree::MixinNode;"experimental;iq;	@	:@children[ :@keywords{ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform-origin;io;	@	o; 	;"origin;io;"origin;	@	o:!Sass::Script::UnaryOperation	:@operator:not:@operando;	;;;"	-moz;ip;	@	;ip;	@	o;	;;;"-webkit;ip;	@	o;	;;;o;	;;;"-o;ip;	@	;ip;	@	o;	;;;o;	;;;"-ms;ip;	@	;ip;	@	o;	;;;o;	;;;"-khtml;ip;	@	;ip;	@	o;	;;;"official;ip;	@	;$[[o;;"origin;"origin;	@0[o;;"only3d;"only3d;	@0o;;0;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;i ;iy;	@;
[ o;;"transform-origin;T;i;	@;
[o;;0;"origin;o;"
;"unquote;i;	@;#{ ;$[o:Sass::Script::String	:
@type:string;" ;i;	@;i;	@;
[ u;%[o:Sass::Script::Operation
:@operator:or:@operand2o:Sass::Script::Variable	:
@name"origin-z:
@linei:@underscored_name"origin_z:@options{ :@operand1o; 
;;;o;		;
"origin-y;i;"origin_y;@
;o;		;
"origin-x;i;"origin_x;@
;i;@
;i;@
0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:
@linei:@underscored_name"origin_x:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:@guarded0:
@name"origin:
@expro:Sass::Script::Number:@denominator_units[ :@valuei7:@numerator_units["%:
@linei:@options{ :@original"50%;i;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;"origin:
@expro; 	;"origin-x;i;"origin_x;	@	;i;	@	:@children[ u;Þ[o:Sass::Script::Variable	:
@name"origin-y:
@linei:@underscored_name"origin_y:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@underscored_name"origin_z:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;"origin;i;"origin;	@	o:Sass::Script::Number:@denominator_units[ ;i7:@numerator_units["%;i;	@	:@original"50%:@separator:
space;i;	@	;i;	@	:@children[ [o:Sass::Tree::VariableNode:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;"origin;i;"origin;	@	o; 	;"origin-y;i;"origin_y;	@	:@separator:
space;i;	@	;i;	@	:@children[ u;5[o:Sass::Script::Variable	:
@name"origin-z:
@linei:@underscored_name"origin_z:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"origin:
@expro:Sass::Script::List	:@value[o; 	;"origin;i;"origin;	@	o; 	;"origin-z;i;"origin_z;	@	:@separator:
space;i;	@	;i;	@	:@children[ o:Sass::Tree::MixinNode;
"apply-origin;i;@
:@children[ :@keywords{ :
@args[o;		;
"origin;i;"origin;@
o;		;
"only3d;i;"only3d;@
;$[	[o;;"origin-x;"origin_x;	@o;	;"default-origin-x;i|;"default_origin_x;	@[o;;"origin-y;"origin_y;	@o;	;"default-origin-y;i};"default_origin_y;	@[o;;"origin-z;"origin_z;	@o:Sass::Script::Bool;F;i~;	@[o;;"only3d;"only3d;	@o;"
;"if;i;	@;#{ ;$[o;	;"origin-z;i;"origin_z;	@o;);T;i;	@o;);F;i;	@o;;0;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i ;i;	@;
[ o;;"transform;T;i;	@;
[u;%6[o:Sass::Script::Variable	:
@name"only3d:
@linei:@underscored_name"only3d:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@name"experimental:
@linei:@options{ :@children[ :@keywords{ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;@	o:Sass::Script::Variable	;"transform;i:@underscored_name"transform;@	o;	;;;"	-moz;i;@	o;	;;;"-webkit;i;@	o;	;;;"-o;i;@	o;	;;;"-ms;i;@	o:!Sass::Script::UnaryOperation	:@operator:not:@operando;	;;;"-khtml;i;@	;i;@	o;	;;;"official;i;@	[o:Sass::Tree::MixinNode;"experimental;i;	@	:@children[ :@keywords{ :
@args[o:Sass::Script::String	:
@type:identifier:@value"transform;i;	@	o; 	;"transform;i;"transform;	@	o:!Sass::Script::UnaryOperation	:@operator:not:@operando;	;;;"	-moz;i;	@	;i;	@	o;	;;;"-webkit;i;	@	o;	;;;o;	;;;"-o;i;	@	;i;	@	o;	;;;o;	;;;"-ms;i;	@	;i;	@	o;	;;;o;	;;;"-khtml;i;	@	;i;	@	o;	;;;"official;i;	@	;$[[o;;"transform;"transform;	@0[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["D/* Shortcut to target all browsers with 2D transform support */;i ;i;	@;
[ o;;"transform2d;T;i ;	@;
[o:Sass::Tree::MixinNode;"transform;i¡;	@;
[ ;#{ ;$[o;	;"
trans;i¡;"
trans;	@o;);F;i¡;	@;$[[o;;"
trans;"
trans;	@0o;;0;["E/* Shortcut to target only browsers with 3D transform support */;i ;i¤;	@;
[ o;;"transform3d;T;i¥;	@;
[o;*;"transform;i¦;	@;
[ ;#{ ;$[o;	;"
trans;i¦;"
trans;	@o;);T;i¦;	@;$[[o;;"
trans;"
trans;	@0o;;0;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i ;i©;	@;
[ o;;0;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i ;i­;	@;
[ o;;"perspective;T;i´;	@;
[o;*;"experimental;i·;	@;
[ ;#{ ;$[o;&	;':identifier;"perspective;iµ;	@o;	;"p;iµ;"p;	@o:!Sass::Script::UnaryOperation	;:not:@operando;&	;';+;"	-moz;i¶;	@;i¶;	@o;&	;';+;"-webkit;i¶;	@o;,	;;-;.o;&	;';+;"-o;i¶;	@;i¶;	@o;,	;;-;.o;&	;';+;"-ms;i¶;	@;i¶;	@o;,	;;-;.o;&	;';+;"-khtml;i¶;	@;i¶;	@o;&	;';+;"official;i¶;	@;$[[o;;"p;"p;	@0o;;0;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;i ;iº;	@;
[ o;;"perspective-origin;T;i¿;	@;
[o;*;"experimental;iÂ;	@;
[ ;#{ ;$[o;&	;';+;"perspective-origin;iÀ;	@o;	;"origin;iÀ;"origin;	@o;,	;;-;.o;&	;';+;"	-moz;iÁ;	@;iÁ;	@o;&	;';+;"-webkit;iÁ;	@o;,	;;-;.o;&	;';+;"-o;iÁ;	@;iÁ;	@o;,	;;-;.o;&	;';+;"-ms;iÁ;	@;iÁ;	@o;,	;;-;.o;&	;';+;"-khtml;iÁ;	@;iÁ;	@o;&	;';+;"official;iÁ;	@;$[[o;;"origin;"origin;	@o;;[ ;i7;["%;i¿;	@;"50%o;;0;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;i ;iÅ;	@;
[ o;;"transform-style;T;iË;	@;
[o;*;"experimental;iÎ;	@;
[ ;#{ ;$[o;&	;';+;"transform-style;iÌ;	@o;	;"
style;iÌ;"
style;	@o;,	;;-;.o;&	;';+;"	-moz;iÍ;	@;iÍ;	@o;&	;';+;"-webkit;iÍ;	@o;,	;;-;.o;&	;';+;"-o;iÍ;	@;iÍ;	@o;,	;;-;.o;&	;';+;"-ms;iÍ;	@;iÍ;	@o;,	;;-;.o;&	;';+;"-khtml;iÍ;	@;iÍ;	@o;&	;';+;"official;iÍ;	@;$[[o;;"
style;"
style;	@o;&	;';+;"preserve-3d;iË;	@o;;0;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;i ;iÑ;	@;
[ o;;"backface-visibility;T;i×;	@;
[o;*;"experimental;iÚ;	@;
[ ;#{ ;$[o;&	;';+;"backface-visibility;iØ;	@o;	;"visibility;iØ;"visibility;	@o;,	;;-;.o;&	;';+;"	-moz;iÙ;	@;iÙ;	@o;&	;';+;"-webkit;iÙ;	@o;,	;;-;.o;&	;';+;"-o;iÙ;	@;iÙ;	@o;,	;;-;.o;&	;';+;"-ms;iÙ;	@;iÙ;	@o;,	;;-;.o;&	;';+;"-khtml;iÙ;	@;iÙ;	@o;&	;';+;"official;iÙ;	@;$[[o;;"visibility;"visibility;	@o;&	;';+;"hidden;i×;	@o;;0;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;i ;iÝ;	@;
[ o;;0;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;i ;iä;	@;
[ o;;0;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iç;	@;
[ o;;"
scale;T;iõ;	@;
[o;;0;"
trans;o;"
;"
scale;iö;	@;#{ ;$[o;	;"scale-x;iö;"scale_x;	@o;	;"scale-y;iö;"scale_y;	@;iö;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei÷:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i÷;	@	:@keywords{ :
@args[o; 	;"perspective;i÷;"perspective;	@	o; 	;"
trans;i÷;"
trans;	@	:@separator:
space;i÷;	@	;i÷;	@	:@children[ o;*;"transform;iø;	@;
[ ;#{ ;$[o;	;"
trans;iø;"
trans;	@o;	;"only3d;iø;"only3d;	@;$[	[o;;"scale-x;"scale_x;	@o;	;"default-scale-x;iñ;"default_scale_x;	@[o;;"scale-y;"scale_y;	@o;	;"scale-x;iò;"scale_x;	@[o;;"perspective;"perspective;	@o;);F;ió;	@[o;;"only3d;"only3d;	@o;);F;iô;	@o;;0;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iû;	@;
[ o;;"scaleX;T;i;	@;
[o;;0;"
trans;o;"
;"scaleX;i;	@;#{ ;$[o;	;"
scale;i;"
scale;	@;i;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i;	@	:@keywords{ :
@args[o; 	;"perspective;i;"perspective;	@	o; 	;"
trans;i;"
trans;	@	:@separator:
space;i;	@	;i;	@	:@children[ o;*;"transform;i;	@;
[ ;#{ ;$[o;	;"
trans;i;"
trans;	@o;	;"only3d;i;"only3d;	@;$[[o;;"
scale;"
scale;	@o;	;"default-scale-x;i ;"default_scale_x;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i	;	@;
[ o;;"scaleY;T;i;	@;
[o;;0;"
trans;o;"
;"scaleY;i;	@;#{ ;$[o;	;"
scale;i;"
scale;	@;i;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i;	@	:@keywords{ :
@args[o; 	;"perspective;i;"perspective;	@	o; 	;"
trans;i;"
trans;	@	:@separator:
space;i;	@	;i;	@	:@children[ o;*;"transform;i;	@;
[ ;#{ ;$[o;	;"
trans;i;"
trans;	@o;	;"only3d;i;"only3d;	@;$[[o;;"
scale;"
scale;	@o;	;"default-scale-y;i;"default_scale_y;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i;	@;
[ o;;"scaleZ;T;i;	@;
[o;;0;"
trans;o;"
;"scaleZ;i;	@;#{ ;$[o;	;"
scale;i;"
scale;	@;i;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei :@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i ;	@	:@keywords{ :
@args[o; 	;"perspective;i ;"perspective;	@	o; 	;"
trans;i ;"
trans;	@	:@separator:
space;i ;	@	;i ;	@	:@children[ o;*;"transform3d;i!;	@;
[ ;#{ ;$[o;	;"
trans;i!;"
trans;	@;$[[o;;"
scale;"
scale;	@o;	;"default-scale-z;i;"default_scale_z;	@[o;;"perspective;"perspective;	@o;);F;i;	@o;;0;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i$;	@;
[ o;;"scale3d;T;i-;	@;
[o;;0;"
trans;o;"
;"scale3d;i.;	@;#{ ;$[o;	;"scale-x;i.;"scale_x;	@o;	;"scale-y;i.;"scale_y;	@o;	;"scale-z;i.;"scale_z;	@;i.;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei/:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i/;	@	:@keywords{ :
@args[o; 	;"perspective;i/;"perspective;	@	o; 	;"
trans;i/;"
trans;	@	:@separator:
space;i/;	@	;i/;	@	:@children[ o;*;"transform3d;i0;	@;
[ ;#{ ;$[o;	;"
trans;i0;"
trans;	@;$[	[o;;"scale-x;"scale_x;	@o;	;"default-scale-x;i);"default_scale_x;	@[o;;"scale-y;"scale_y;	@o;	;"default-scale-y;i*;"default_scale_y;	@[o;;"scale-z;"scale_z;	@o;	;"default-scale-z;i+;"default_scale_z;	@[o;;"perspective;"perspective;	@o;);F;i,;	@o;;0;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i ;i3;	@;
[ o;;0;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i7;	@;
[ o;;"rotate;T;i@;	@;
[o;;0;"
trans;o;"
;"rotate;iA;	@;#{ ;$[o;	;"rotate;iA;"rotate;	@;iA;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiB:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iB;	@	:@keywords{ :
@args[o; 	;"perspective;iB;"perspective;	@	o; 	;"
trans;iB;"
trans;	@	:@separator:
space;iB;	@	;iB;	@	:@children[ o;*;"transform;iC;	@;
[ ;#{ ;$[o;	;"
trans;iC;"
trans;	@o;	;"only3d;iC;"only3d;	@;$[[o;;"rotate;"rotate;	@o;	;"default-rotate;i=;"default_rotate;	@[o;;"perspective;"perspective;	@o;);F;i>;	@[o;;"only3d;"only3d;	@o;);F;i?;	@o;;0;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iF;	@;
[ o;;"rotateZ;T;iM;	@;
[o;*;"rotate;iN;	@;
[ ;#{ ;$[o;	;"rotate;iN;"rotate;	@o;	;"perspective;iN;"perspective;	@o;	;"only3d;iN;"only3d;	@;$[[o;;"rotate;"rotate;	@o;	;"default-rotate;iJ;"default_rotate;	@[o;;"perspective;"perspective;	@o;);F;iK;	@[o;;"only3d;"only3d;	@o;);F;iL;	@o;;0;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iQ;	@;
[ o;;"rotateX;T;iX;	@;
[o;;0;"
trans;o;"
;"rotateX;iY;	@;#{ ;$[o;	;"rotate;iY;"rotate;	@;iY;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiZ:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iZ;	@	:@keywords{ :
@args[o; 	;"perspective;iZ;"perspective;	@	o; 	;"
trans;iZ;"
trans;	@	:@separator:
space;iZ;	@	;iZ;	@	:@children[ o;*;"transform3d;i[;	@;
[ ;#{ ;$[o;	;"
trans;i[;"
trans;	@;$[[o;;"rotate;"rotate;	@o;	;"default-rotate;iV;"default_rotate;	@[o;;"perspective;"perspective;	@o;);F;iW;	@o;;0;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i^;	@;
[ o;;"rotateY;T;ie;	@;
[o;;0;"
trans;o;"
;"rotateY;if;	@;#{ ;$[o;	;"rotate;if;"rotate;	@;if;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineig:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;ig;	@	:@keywords{ :
@args[o; 	;"perspective;ig;"perspective;	@	o; 	;"
trans;ig;"
trans;	@	:@separator:
space;ig;	@	;ig;	@	:@children[ o;*;"transform3d;ih;	@;
[ ;#{ ;$[o;	;"
trans;ih;"
trans;	@;$[[o;;"rotate;"rotate;	@o;	;"default-rotate;ic;"default_rotate;	@[o;;"perspective;"perspective;	@o;);F;id;	@o;;0;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;ik;	@;
[ o;;"rotate3d;T;ix;	@;
[o;;0;"
trans;o;"
;"rotate3d;iy;	@;#{ ;$[	o;	;"vector-x;iy;"vector_x;	@o;	;"vector-y;iy;"vector_y;	@o;	;"vector-z;iy;"vector_z;	@o;	;"rotate;iy;"rotate;	@;iy;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiz:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iz;	@	:@keywords{ :
@args[o; 	;"perspective;iz;"perspective;	@	o; 	;"
trans;iz;"
trans;	@	:@separator:
space;iz;	@	;iz;	@	:@children[ o;*;"transform3d;i{;	@;
[ ;#{ ;$[o;	;"
trans;i{;"
trans;	@;$[
[o;;"vector-x;"vector_x;	@o;	;"default-vector-x;is;"default_vector_x;	@[o;;"vector-y;"vector_y;	@o;	;"default-vector-y;it;"default_vector_y;	@[o;;"vector-z;"vector_z;	@o;	;"default-vector-z;iu;"default_vector_z;	@[o;;"rotate;"rotate;	@o;	;"default-rotate;iv;"default_rotate;	@[o;;"perspective;"perspective;	@o;);F;iw;	@o;;0;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i ;i~;	@;
[ o;;0;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i;	@;
[ o;;"translate;T;i;	@;
[o;;0;"
trans;o;"
;"translate;i;	@;#{ ;$[o;	;"translate-x;i;"translate_x;	@o;	;"translate-y;i;"translate_y;	@;i;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i;	@	:@keywords{ :
@args[o; 	;"perspective;i;"perspective;	@	o; 	;"
trans;i;"
trans;	@	:@separator:
space;i;	@	;i;	@	:@children[ o;*;"transform;i;	@;
[ ;#{ ;$[o;	;"
trans;i;"
trans;	@o;	;"only3d;i;"only3d;	@;$[	[o;;"translate-x;"translate_x;	@o;	;"default-translate-x;i;"default_translate_x;	@[o;;"translate-y;"translate_y;	@o;	;"default-translate-y;i;"default_translate_y;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i;	@;
[ o;;"translateX;T;i;	@;
[o;;0;"
trans;o;"
;"translateX;i;	@;#{ ;$[o;	;"trans-x;i;"trans_x;	@;i;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i;	@	:@keywords{ :
@args[o; 	;"perspective;i;"perspective;	@	o; 	;"
trans;i;"
trans;	@	:@separator:
space;i;	@	;i;	@	:@children[ o;*;"transform;i;	@;
[ ;#{ ;$[o;	;"
trans;i;"
trans;	@o;	;"only3d;i;"only3d;	@;$[[o;;"trans-x;"trans_x;	@o;	;"default-translate-x;i;"default_translate_x;	@[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i ;	@;
[ o;;"translateY;T;i¨;	@;
[o;;0;"
trans;o;"
;"translateY;i©;	@;#{ ;$[o;	;"trans-y;i©;"trans_y;	@;i©;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiª:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iª;	@	:@keywords{ :
@args[o; 	;"perspective;iª;"perspective;	@	o; 	;"
trans;iª;"
trans;	@	:@separator:
space;iª;	@	;iª;	@	:@children[ o;*;"transform;i«;	@;
[ ;#{ ;$[o;	;"
trans;i«;"
trans;	@o;	;"only3d;i«;"only3d;	@;$[[o;;"trans-y;"trans_y;	@o;	;"default-translate-y;i¥;"default_translate_y;	@[o;;"perspective;"perspective;	@o;);F;i¦;	@[o;;"only3d;"only3d;	@o;);F;i§;	@o;;0;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i®;	@;
[ o;;"translateZ;T;iµ;	@;
[o;;0;"
trans;o;"
;"translateZ;i¶;	@;#{ ;$[o;	;"trans-z;i¶;"trans_z;	@;i¶;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@linei·:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;i·;	@	:@keywords{ :
@args[o; 	;"perspective;i·;"perspective;	@	o; 	;"
trans;i·;"
trans;	@	:@separator:
space;i·;	@	;i·;	@	:@children[ o;*;"transform3d;i¸;	@;
[ ;#{ ;$[o;	;"
trans;i¸;"
trans;	@;$[[o;;"trans-z;"trans_z;	@o;	;"default-translate-z;i³;"default_translate_z;	@[o;;"perspective;"perspective;	@o;);F;i´;	@o;;0;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i»;	@;
[ o;;"translate3d;T;iÄ;	@;
[o;;0;"
trans;o;"
;"translate3d;iÅ;	@;#{ ;$[o;	;"translate-x;iÅ;"translate_x;	@o;	;"translate-y;iÅ;"translate_y;	@o;	;"translate-z;iÅ;"translate_z;	@;iÅ;	@;
[ u;%[o:Sass::Script::Variable	:
@name"perspective:
@lineiÆ:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
;"perspective;iÆ;	@	:@keywords{ :
@args[o; 	;"perspective;iÆ;"perspective;	@	o; 	;"
trans;iÆ;"
trans;	@	:@separator:
space;iÆ;	@	;iÆ;	@	:@children[ o;*;"transform3d;iÇ;	@;
[ ;#{ ;$[o;	;"
trans;iÇ;"
trans;	@;$[	[o;;"translate-x;"translate_x;	@o;	;"default-translate-x;iÀ;"default_translate_x;	@[o;;"translate-y;"translate_y;	@o;	;"default-translate-y;iÁ;"default_translate_y;	@[o;;"translate-z;"translate_z;	@o;	;"default-translate-z;iÂ;"default_translate_z;	@[o;;"perspective;"perspective;	@o;);F;iÃ;	@o;;0;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;i ;iÊ;	@;
[ o;;0;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iÎ;	@;
[ o;;"	skew;T;iÙ;	@;
[o;;0;"
trans;o;"
;"	skew;iÚ;	@;#{ ;$[o;	;"skew-x;iÚ;"skew_x;	@o;	;"skew-y;iÚ;"skew_y;	@;iÚ;	@;
[ o;*;"transform;iÛ;	@;
[ ;#{ ;$[o;	;"
trans;iÛ;"
trans;	@o;	;"only3d;iÛ;"only3d;	@;$[[o;;"skew-x;"skew_x;	@o;	;"default-skew-x;iÖ;"default_skew_x;	@[o;;"skew-y;"skew_y;	@o;	;"default-skew-y;i×;"default_skew_y;	@[o;;"only3d;"only3d;	@o;);F;iØ;	@o;;0;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iÞ;	@;
[ o;;"
skewX;T;iæ;	@;
[o;;0;"
trans;o;"
;"
skewX;iç;	@;#{ ;$[o;	;"skew-x;iç;"skew_x;	@;iç;	@;
[ o;*;"transform;iè;	@;
[ ;#{ ;$[o;	;"
trans;iè;"
trans;	@o;	;"only3d;iè;"only3d;	@;$[[o;;"skew-x;"skew_x;	@o;	;"default-skew-x;iä;"default_skew_x;	@[o;;"only3d;"only3d;	@o;);F;iå;	@o;;0;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;ië;	@;
[ o;;"
skewY;T;ió;	@;
[o;;0;"
trans;o;"
;"
skewY;iô;	@;#{ ;$[o;	;"skew-y;iô;"skew_y;	@;iô;	@;
[ o;*;"transform;iõ;	@;
[ ;#{ ;$[o;	;"
trans;iõ;"
trans;	@o;	;"only3d;iõ;"only3d;	@;$[[o;;"skew-y;"skew_y;	@o;	;"default-skew-y;iñ;"default_skew_y;	@[o;;"only3d;"only3d;	@o;);F;iò;	@o;;0;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;iù;	@;
[ o;;"create-transform;T;i;	@;
[o;;0;"
trans;o;"
;"unquote;i;	@;#{ ;$[o;&	;';(;" ;i;	@;i;	@;
[ o;;0;["/* perspective */;i ;i;	@;
[ u;%.[o:Sass::Script::Variable	:
@name"perspective:
@linei:@underscored_name"perspective:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::Funcall
;"perspective;i;	@	:@keywords{ :
@args[o; 	;"perspective;i;"perspective;	@	;i;	@	:@children[ o;;0;["/* scale */;i ;i;	@;
[ u;%Ê[o:Sass::Script::Operation
:@operator:and:@operand2o:Sass::Script::Variable	:
@name"scale-y:
@linei:@underscored_name"scale_y:@options{ :@operand1o;		;
"scale-x;i;"scale_x;@
;i;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:
@linei:@underscored_name"scale_x:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i;"
trans;	@	o:Sass::Script::Funcall
;"scaleX;i;	@	:@keywords{ :
@args[o; 	;"scale-x;i;"scale_x;	@	:@separator:
space;i;	@	;i;	@	:@children[ u; v[o:Sass::Script::Variable	:
@name"scale-y:
@linei :@underscored_name"scale_y:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i ;"
trans;	@	o:Sass::Script::Funcall
;"scaleY;i ;	@	:@keywords{ :
@args[o; 	;"scale-y;i ;"scale_y;	@	:@separator:
space;i ;	@	;i ;	@	:@children[ u; v[o:Sass::Script::Variable	:
@name"scale-z:
@linei!:@underscored_name"scale_z:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i!;"
trans;	@	o:Sass::Script::Funcall
;"scaleZ;i!;	@	:@keywords{ :
@args[o; 	;"scale-z;i!;"scale_z;	@	:@separator:
space;i!;	@	;i!;	@	:@children[ [u;L[o:Sass::Script::Variable	:
@name"scale-z:
@linei:@underscored_name"scale_z:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans:
@linei:@underscored_name"
trans:@options{ o:Sass::Script::Funcall
;"
scale;i;@:@keywords{ :
@args[o;	;"scale-x;i;"scale_x;@o;	;"scale-y;i;"scale_y;@:@separator:
space;i;@;i;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i;"
trans;	@	o:Sass::Script::Funcall
;"scale3d;i;	@	:@keywords{ :
@args[o; 	;"scale-x;i;"scale_x;	@	o; 	;"scale-y;i;"scale_y;	@	o; 	;"scale-z;i;"scale_z;	@	:@separator:
space;i;	@	;i;	@	:@children[ o;;0;["/* rotate */;i ;i$;	@;
[ u;%{[o:Sass::Script::Variable	:
@name"rotate-x:
@linei%:@underscored_name"rotate_x:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i%;"
trans;	@	o:Sass::Script::Funcall
;"rotateX;i%;	@	:@keywords{ :
@args[o; 	;"rotate-x;i%;"rotate_x;	@	:@separator:
space;i%;	@	;i%;	@	:@children[ u;%{[o:Sass::Script::Variable	:
@name"rotate-y:
@linei&:@underscored_name"rotate_y:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i&;"
trans;	@	o:Sass::Script::Funcall
;"rotateY;i&;	@	:@keywords{ :
@args[o; 	;"rotate-y;i&;"rotate_y;	@	:@separator:
space;i&;	@	;i&;	@	:@children[ u;%{[o:Sass::Script::Variable	:
@name"rotate-z:
@linei':@underscored_name"rotate_z:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i';"
trans;	@	o:Sass::Script::Funcall
;"rotateZ;i';	@	:@keywords{ :
@args[o; 	;"rotate-z;i';"rotate_z;	@	:@separator:
space;i';	@	;i';	@	:@children[ u;%|[o:Sass::Script::Variable	:
@name"rotate3d:
@linei(:@underscored_name"rotate3d:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i(;"
trans;	@	o:Sass::Script::Funcall
;"rotate3d;i(;	@	:@keywords{ :
@args[o; 	;"rotate3d;i(;"rotate3d;	@	:@separator:
space;i(;	@	;i(;	@	:@children[ o;;0;["/* translate */;i ;i*;	@;
[ u;%Þ[o:Sass::Script::Operation
:@operator:and:@operand2o:Sass::Script::Variable	:
@name"trans-y:
@linei+:@underscored_name"trans_y:@options{ :@operand1o;		;
"trans-x;i+;"trans_x;@
;i+;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:
@linei/:@underscored_name"trans_x:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i/;"
trans;	@	o:Sass::Script::Funcall
;"translateX;i/;	@	:@keywords{ :
@args[o; 	;"trans-x;i/;"trans_x;	@	:@separator:
space;i/;	@	;i/;	@	:@children[ u; z[o:Sass::Script::Variable	:
@name"trans-y:
@linei0:@underscored_name"trans_y:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i0;"
trans;	@	o:Sass::Script::Funcall
;"translateY;i0;	@	:@keywords{ :
@args[o; 	;"trans-y;i0;"trans_y;	@	:@separator:
space;i0;	@	;i0;	@	:@children[ u; z[o:Sass::Script::Variable	:
@name"trans-z:
@linei1:@underscored_name"trans_z:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i1;"
trans;	@	o:Sass::Script::Funcall
;"translateZ;i1;	@	:@keywords{ :
@args[o; 	;"trans-z;i1;"trans_z;	@	:@separator:
space;i1;	@	;i1;	@	:@children[ [u;T[o:Sass::Script::Variable	:
@name"trans-z:
@linei,:@underscored_name"trans_z:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:@guarded0:
@name"
trans:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans:
@linei-:@underscored_name"
trans:@options{ o:Sass::Script::Funcall
;"translate;i-;@:@keywords{ :
@args[o;	;"trans-x;i-;"trans_x;@o;	;"trans-y;i-;"trans_y;@:@separator:
space;i-;@;i-;@:@children[ [o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i,;"
trans;	@	o:Sass::Script::Funcall
;"translate3d;i,;	@	:@keywords{ :
@args[o; 	;"trans-x;i,;"trans_x;	@	o; 	;"trans-y;i,;"trans_y;	@	o; 	;"trans-z;i,;"trans_z;	@	:@separator:
space;i,;	@	;i,;	@	:@children[ o;;0;["/* skew */;i ;i4;	@;
[ u;%[o:Sass::Script::Operation
:@operator:and:@operand2o:Sass::Script::Variable	:
@name"skew-y:
@linei5:@underscored_name"skew_y:@options{ :@operand1o;		;
"skew-x;i5;"skew_x;@
;i5;@
u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:
@linei7:@underscored_name"skew_x:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i7;"
trans;	@	o:Sass::Script::Funcall
;"
skewX;i7;	@	:@keywords{ :
@args[o; 	;"skew-x;i7;"skew_x;	@	:@separator:
space;i7;	@	;i7;	@	:@children[ u; q[o:Sass::Script::Variable	:
@name"skew-y:
@linei8:@underscored_name"skew_y:@options{ 0[o:Sass::Tree::VariableNode:@guarded0;"
trans:
@expro:Sass::Script::List	:@value[o; 	;"
trans;i8;"
trans;	@	o:Sass::Script::Funcall
;"
skewY;i8;	@	:@keywords{ :
@args[o; 	;"skew-y;i8;"skew_y;	@	:@separator:
space;i8;	@	;i8;	@	:@children[ [o:Sass::Tree::VariableNode:@guarded0;
"
trans:
@expro:Sass::Script::List	:@value[o;		;
"
trans;i5;"
trans;@
o:Sass::Script::Funcall
;
"	skew;i5;@
:@keywords{ :
@args[o;		;
"skew-x;i5;"skew_x;@
o;		;
"skew-y;i5;"skew_y;@
:@separator:
space;i5;@
;i5;@
:@children[ o;;0;["/* apply it! */;i ;i;;	@;
[ o;*;"transform;i<;	@;
[ ;#{ ;$[o;	;"
trans;i<;"
trans;	@o;	;"only3d;i<;"only3d;	@o;*;"transform-origin;i=;	@;
[ ;#{ ;$[	o;	;"origin-x;i=;"origin_x;	@o;	;"origin-y;i=;"origin_y;	@o;	;"origin-z;i=;"origin_z;	@o;	;"only3d;i=;"only3d;	@;$[[o;;"perspective;"perspective;	@o;);F;i;	@[o;;"scale-x;"scale_x;	@o;);F;i;	@[o;;"scale-y;"scale_y;	@o;);F;i;	@[o;;"scale-z;"scale_z;	@o;);F;i;	@[o;;"rotate-x;"rotate_x;	@o;);F;i;	@[o;;"rotate-y;"rotate_y;	@o;);F;i;	@[o;;"rotate-z;"rotate_z;	@o;);F;i	;	@[o;;"rotate3d;"rotate3d;	@o;);F;i
;	@[o;;"trans-x;"trans_x;	@o;);F;i;	@[o;;"trans-y;"trans_y;	@o;);F;i;	@[o;;"trans-z;"trans_z;	@o;);F;i;	@[o;;"skew-x;"skew_x;	@o;);F;i;	@[o;;"skew-y;"skew_y;	@o;);F;i;	@[o;;"origin-x;"origin_x;	@o;);F;i;	@[o;;"origin-y;"origin_y;	@o;);F;i;	@[o;;"origin-z;"origin_z;	@o;);F;i;	@[o;;"only3d;"only3d;	@o;);F;i;	@o;;0;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;i ;iA;	@;
[ o;;"simple-transform;T;iL;	@;
[o;*;"create-transform;iU;	@;
[ ;#{ ;$[o;);F;iN;	@o;	;"
scale;iO;"
scale;	@o;	;"
scale;iO;"
scale;	@o;);F;iO;	@o;);F;iP;	@o;);F;iP;	@o;	;"rotate;iP;"rotate;	@o;);F;iP;	@o;	;"trans-x;iQ;"trans_x;	@o;	;"trans-y;iQ;"trans_y;	@o;);F;iQ;	@o;	;"skew-x;iR;"skew_x;	@o;	;"skew-y;iR;"skew_y;	@o;	;"origin-x;iS;"origin_x;	@o;	;"origin-y;iS;"origin_y;	@o;);F;iS;	@o;);F;iT;	@;$[[o;;"
scale;"
scale;	@o;);F;iD;	@[o;;"rotate;"rotate;	@o;);F;iE;	@[o;;"trans-x;"trans_x;	@o;);F;iF;	@[o;;"trans-y;"trans_y;	@o;);F;iG;	@[o;;"skew-x;"skew_x;	@o;);F;iH;	@[o;;"skew-y;"skew_y;	@o;);F;iI;	@[o;;"origin-x;"origin_x;	@o;);F;iJ;	@[o;;"origin-y;"origin_y;	@o;);F;iK;	@